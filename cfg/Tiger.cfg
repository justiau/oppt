# General-purpose settings.
verbose = false
logPath = log
overwriteExistingLogFiles = true
saveParticles = true

[plugins]
heuristicPlugin = libDefaultHeuristicPlugin.so

planningRewardPlugin = libdefaultRewardPlugin.so
executionRewardPlugin = libdefaultRewardPlugin.so

planningTerminalPlugin = libdefaultTerminalPlugin.so
executionTerminalPlugin = libdefaultTerminalPlugin.so

planningTransitionPlugin = libtigerTransitionPlugin.so
executionTransitionPlugin = libdefaultTransitionPlugin.so

planningObservationPlugin = libdefaultObservationPlugin.so
executionObservationPlugin = libdefaultObservationPlugin.so

executionInitialBeliefPlugin = libdefaultInitialBeliefPlugin.so
planningInitialBeliefPlugin = libdefaultInitialBeliefPlugin.so

[transitionPluginOptions]
processError = 0.025
controlDuration = 0.3
errorDistribution = normal
softLimitThreshold = 0

[observationPluginOptions]
observationError = 0.00025

[rewardPluginOptions]
stepPenalty = 1
illegalMovePenalty = 500
exitReward = 1000

[heuristicPluginOptions]
planningRange = 0.025
goalState = [0.7, 0.7, 1.54, 0]

[terminalPluginOptions]
goalLink = Dubin::DubinLink
goalLinkPoint = [0, 0, 0]

[initialBeliefOptions]
lowerBound = [0.0]
upperBound = [0.0]

# [-0.7,-0.7]

[problem]
# Number of simulation runs
nRuns = 3

# Maximum number of steps to reach the goal
nSteps = 150

# The planning environment SDF
# planningEnvironmentPath = DubinMazeEnvironment.sdf

# The execution environment SDF
# executionEnvironmentPath = DubinMazeEnvironment.sdf

# The robot SDF model
robotName = Dubin

enableGazeboStateLogging = false

# The discount factor of the reward model
discountFactor = 0.99

# Using state- action- and observation spaces that are normalized to [0, 1]
normalizedSpaces = false

allowCollisions = false

# The maximum time to spend on each step, in milliseconds (0 => no time limit)
stepTimeout = 1000

[state]
# linkPositionsX = [Dubin::DubinLink]
# linkPositionsY = [Dubin::DubinLink]
# linkOrientationsZ = [Dubin::DubinLink]
# linkOrientationsZLimits = [[-100, 100]]

# linkPositionXLimits = [[-1, 1]]
# linkPositionYLimits = [[-1, 1]]

additionalDimensions = 1
additionalDimensionLimits = [[tiger-left, tiger-right]]

[action]
additionalDimensions = 1
additionalDimensionLimits = [[open-left, open-right]]

[observation]
additionalDimensions = 1
additionalDimensionLimits = [[sound-left, sound-right]]

[changes]
hasChanges = false
areDynamic = false

[ABT]
# The number of trajectories to simulate per time step (0 => wait for timeout)
historiesPerStep = 0

# If this is set to "true", ABT will prune the tree after every step.
pruneEveryStep = true

# If this is set to "true", ABT will reset the tree instead of modifying it when
# changes occur.
resetOnChanges = false

# The particle filter to use
particleFilter = observationModel

# The minimum number of particles for the current belief state in a simulation.
# Extra particles will be resampled via a particle filter if the particle count
# for the *current* belief state drops below this number during simulation.
minParticleCount = 3000

# True if the above horizon is relative to the initial belief, and false
# if it's relative to the current belief.
isAbsoluteHorizon = false

searchStrategy = ucb(2.0)

estimator = max()

heuristicTimeout = 0.1

savePolicy = false
loadInitialPolicy = false
policyPath = final-0.pol

actionType = discrete
numInputStepsActions = 4

observationType = continuous

# The maximum L2-distance between observations for them to be considered similar
maxObservationDistance = 1.2

[simulation]
interactive = true
particlePlotLimit = 30
